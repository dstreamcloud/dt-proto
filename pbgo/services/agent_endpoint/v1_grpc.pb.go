// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package agent_endpoint_pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// V1Client is the client API for V1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type V1Client interface {
	SubscribeV1(ctx context.Context, in *SubscribeV1_Request, opts ...grpc.CallOption) (V1_SubscribeV1Client, error)
	ReportJobV1(ctx context.Context, opts ...grpc.CallOption) (V1_ReportJobV1Client, error)
}

type v1Client struct {
	cc grpc.ClientConnInterface
}

func NewV1Client(cc grpc.ClientConnInterface) V1Client {
	return &v1Client{cc}
}

func (c *v1Client) SubscribeV1(ctx context.Context, in *SubscribeV1_Request, opts ...grpc.CallOption) (V1_SubscribeV1Client, error) {
	stream, err := c.cc.NewStream(ctx, &V1_ServiceDesc.Streams[0], "/agent_endpoint.V1/SubscribeV1", opts...)
	if err != nil {
		return nil, err
	}
	x := &v1SubscribeV1Client{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type V1_SubscribeV1Client interface {
	Recv() (*SubscribeV1_Response, error)
	grpc.ClientStream
}

type v1SubscribeV1Client struct {
	grpc.ClientStream
}

func (x *v1SubscribeV1Client) Recv() (*SubscribeV1_Response, error) {
	m := new(SubscribeV1_Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *v1Client) ReportJobV1(ctx context.Context, opts ...grpc.CallOption) (V1_ReportJobV1Client, error) {
	stream, err := c.cc.NewStream(ctx, &V1_ServiceDesc.Streams[1], "/agent_endpoint.V1/ReportJobV1", opts...)
	if err != nil {
		return nil, err
	}
	x := &v1ReportJobV1Client{stream}
	return x, nil
}

type V1_ReportJobV1Client interface {
	Send(*ReportJobV1_Request) error
	CloseAndRecv() (*ReportJobV1_Response, error)
	grpc.ClientStream
}

type v1ReportJobV1Client struct {
	grpc.ClientStream
}

func (x *v1ReportJobV1Client) Send(m *ReportJobV1_Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *v1ReportJobV1Client) CloseAndRecv() (*ReportJobV1_Response, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ReportJobV1_Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// V1Server is the server API for V1 service.
// All implementations must embed UnimplementedV1Server
// for forward compatibility
type V1Server interface {
	SubscribeV1(*SubscribeV1_Request, V1_SubscribeV1Server) error
	ReportJobV1(V1_ReportJobV1Server) error
	mustEmbedUnimplementedV1Server()
}

// UnimplementedV1Server must be embedded to have forward compatible implementations.
type UnimplementedV1Server struct {
}

func (UnimplementedV1Server) SubscribeV1(*SubscribeV1_Request, V1_SubscribeV1Server) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeV1 not implemented")
}
func (UnimplementedV1Server) ReportJobV1(V1_ReportJobV1Server) error {
	return status.Errorf(codes.Unimplemented, "method ReportJobV1 not implemented")
}
func (UnimplementedV1Server) mustEmbedUnimplementedV1Server() {}

// UnsafeV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to V1Server will
// result in compilation errors.
type UnsafeV1Server interface {
	mustEmbedUnimplementedV1Server()
}

func RegisterV1Server(s grpc.ServiceRegistrar, srv V1Server) {
	s.RegisterService(&V1_ServiceDesc, srv)
}

func _V1_SubscribeV1_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeV1_Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(V1Server).SubscribeV1(m, &v1SubscribeV1Server{stream})
}

type V1_SubscribeV1Server interface {
	Send(*SubscribeV1_Response) error
	grpc.ServerStream
}

type v1SubscribeV1Server struct {
	grpc.ServerStream
}

func (x *v1SubscribeV1Server) Send(m *SubscribeV1_Response) error {
	return x.ServerStream.SendMsg(m)
}

func _V1_ReportJobV1_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(V1Server).ReportJobV1(&v1ReportJobV1Server{stream})
}

type V1_ReportJobV1Server interface {
	SendAndClose(*ReportJobV1_Response) error
	Recv() (*ReportJobV1_Request, error)
	grpc.ServerStream
}

type v1ReportJobV1Server struct {
	grpc.ServerStream
}

func (x *v1ReportJobV1Server) SendAndClose(m *ReportJobV1_Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *v1ReportJobV1Server) Recv() (*ReportJobV1_Request, error) {
	m := new(ReportJobV1_Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// V1_ServiceDesc is the grpc.ServiceDesc for V1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var V1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "agent_endpoint.V1",
	HandlerType: (*V1Server)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeV1",
			Handler:       _V1_SubscribeV1_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ReportJobV1",
			Handler:       _V1_ReportJobV1_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "services/agent-endpoint/v1.proto",
}
