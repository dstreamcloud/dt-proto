// Code generated by protoc-gen-setter. DO NOT EDIT.

package dag_pb

func (z *V1_Release) SetId(v string) *V1_Release {
	z.Id = v
	return z
}
func (z *V1_Release) SetCreatedAt(v int64) *V1_Release {
	z.CreatedAt = v
	return z
}
func (z *V1_Release) SetTeamID(v string) *V1_Release {
	z.TeamID = v
	return z
}
func (z *V1_Release) SetProjectID(v string) *V1_Release {
	z.ProjectID = v
	return z
}
func (z *V1_Release) SetOwnerID(v string) *V1_Release {
	z.OwnerID = v
	return z
}
func (z *V1_Release) SetSourceID(v string) *V1_Release {
	z.SourceID = v
	return z
}
func (z *V1_Release) SetName(v string) *V1_Release {
	z.Name = v
	return z
}
func (z *V1_Release) SetRemarks(v string) *V1_Release {
	z.Remarks = v
	return z
}
func (z *V1_Release) SetEntryID(v string) *V1_Release {
	z.EntryID = v
	return z
}
func (z *V1_Release) SetExitID(v string) *V1_Release {
	z.ExitID = v
	return z
}
func (z *V1_Release) SetModules(v []*V1_Release) *V1_Release {
	z.Modules = v
	return z
}
func (z *V1_Release) AppendModules(v *V1_Release) *V1_Release {
	z.Modules = append(z.Modules, v)
	return z
}
func (z *V1_Release) SetNodes(v []*V1_Node) *V1_Release {
	z.Nodes = v
	return z
}
func (z *V1_Release) AppendNodes(v *V1_Node) *V1_Release {
	z.Nodes = append(z.Nodes, v)
	return z
}
func (z *V1_Release) SetEdges(v []*V1_Edge) *V1_Release {
	z.Edges = v
	return z
}
func (z *V1_Release) AppendEdges(v *V1_Edge) *V1_Release {
	z.Edges = append(z.Edges, v)
	return z
}
func (z *V1_Release) SetInputs(v map[string]string) *V1_Release {
	z.Inputs = v
	return z
}
func (z *V1_Release) PutInputs(k string, v string) *V1_Release {
	z.Inputs[k] = v
	return z
}
func (z *V1_Source) SetId(v string) *V1_Source {
	z.Id = v
	return z
}
func (z *V1_Source) SetCreatedAt(v int64) *V1_Source {
	z.CreatedAt = v
	return z
}
func (z *V1_Source) SetUpdatedAt(v int64) *V1_Source {
	z.UpdatedAt = v
	return z
}
func (z *V1_Source) SetTeamID(v string) *V1_Source {
	z.TeamID = v
	return z
}
func (z *V1_Source) SetProjectID(v string) *V1_Source {
	z.ProjectID = v
	return z
}
func (z *V1_Source) SetOwnerID(v string) *V1_Source {
	z.OwnerID = v
	return z
}
func (z *V1_Source) SetName(v string) *V1_Source {
	z.Name = v
	return z
}
func (z *V1_Source) SetRemarks(v string) *V1_Source {
	z.Remarks = v
	return z
}
func (z *V1_Source) SetEntryID(v string) *V1_Source {
	z.EntryID = v
	return z
}
func (z *V1_Source) SetExitID(v string) *V1_Source {
	z.ExitID = v
	return z
}
func (z *V1_Source) SetModules(v []string) *V1_Source {
	z.Modules = v
	return z
}
func (z *V1_Source) AppendModules(v string) *V1_Source {
	z.Modules = append(z.Modules, v)
	return z
}
func (z *V1_Source) SetNodes(v []*V1_Node) *V1_Source {
	z.Nodes = v
	return z
}
func (z *V1_Source) AppendNodes(v *V1_Node) *V1_Source {
	z.Nodes = append(z.Nodes, v)
	return z
}
func (z *V1_Source) SetEdges(v []*V1_Edge) *V1_Source {
	z.Edges = v
	return z
}
func (z *V1_Source) AppendEdges(v *V1_Edge) *V1_Source {
	z.Edges = append(z.Edges, v)
	return z
}
func (z *V1_Source) SetInputs(v map[string]string) *V1_Source {
	z.Inputs = v
	return z
}
func (z *V1_Source) PutInputs(k string, v string) *V1_Source {
	z.Inputs[k] = v
	return z
}
func (z *V1_Node) SetId(v string) *V1_Node {
	z.Id = v
	return z
}
func (z *V1_Node) SetType(v V1_Node_Type) *V1_Node {
	z.Type = v
	return z
}
func (z *V1_Node) SetData(v []byte) *V1_Node {
	z.Data = v
	return z
}
func (z *V1_Node) SetInputs(v map[string]string) *V1_Node {
	z.Inputs = v
	return z
}
func (z *V1_Node) PutInputs(k string, v string) *V1_Node {
	z.Inputs[k] = v
	return z
}
func (z *V1_Edge) SetId(v string) *V1_Edge {
	z.Id = v
	return z
}
func (z *V1_Edge) SetSource(v string) *V1_Edge {
	z.Source = v
	return z
}
func (z *V1_Edge) SetTarget(v string) *V1_Edge {
	z.Target = v
	return z
}
